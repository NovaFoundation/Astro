package "novex/astro/tree/nodes"

import "novex/astro/Astro"
import "novex/astro/InvalidParseException"
import "novex/astro/SyntaxErrorException"
import "novex/astro/error/UnimplementedOperationException"
import "novex/astro/tree/nodes/annotations/Annotatable"
import "novex/astro/tree/nodes/annotations/Annotation"
import "novex/astro/tree/nodes/exceptionhandling/Try"
import "novex/astro/util/Location"
import "novex/astro/error/UnimplementedOperationException"
import "novex/astro/tree/nodes/functions/FunctionDeclaration"
import "novex/astro/tree/nodes/functions/FunctionCall"
import "novex/astro/tree/nodes/functions/Instantiation"
import "novex/astro/tree/nodes/functions/closures/LambdaExpression"
import "novex/astro/tree/nodes/variables/VariableDeclaration"

import "nova/datastruct/Bounds"

/// Class that is the parent of all Nodes on the Tree. Keeps the basic
/// information of where the statement was in the source, and where it was
/// output in the destination file.
/// 
/// author:  Braden Steffaniak
/// since:   v0.1 Jan 5, 2014 at 9:00:11 PM
/// version: v0.2.41 Dec 17, 2014 at 7:48:17 PM
[AutoFinal]
class Node implements Annotatable {
    visible static var Int staticId = 0
    visible Int id = ++staticId
    
    visible var Location location
    
    visible var Annotation[] annotations
    
    public var Node parent
    
    visible String locationInfo {
        get {
            var info = ""
            
            if (parentFile) {
                info += "#parentFile.fileLocation"
            }
            if (location) {
                info += (info.count > 0 ? ":" : "at location ") + "#location"
            }
            
            return info
        }
        
        no set
    }
    
    public String nodeType {
        get {
            let name = this.class.name
            
            return name
        }
        
        no set
    }
    
    
    /// Get whether or not the specified Node is being decoded at
    /// the current moment.
    /// 
    /// return: Whether or not the specified Node is being decoded at
    ///         the current moment.
    visible Bool isDecoding => false
    visible Bool isValid => parent != null
    visible Bool isUserMade => true
    visible Bool isWithinStaticContext => !parentFunction || !parentFunction.isInstance
    visible Bool isWithinExternalContext => parent?.isWithinExternalContext
    
    visible Program program => parent?.program
    
    visible Byte phase => program.tree.phase
    
    visible Instantiation parentInstantiation => parent?.parentInstantiation
    visible LambdaExpression parentLambda => parent?.parentLambda
    
    visible NovaFile parentFile => parent?.parentFile
    visible Bool isWithinFile => parentFile != null
    
    visible FunctionCall parentFunctionCall => parent?.parentFunctionCall
    
    visible FunctionDeclaration parentFunction => parent?.parentFunction
    visible Bool isWithinFunction => parentFunction != null
    
    visible Try parentTry => parent?.parentTry
    visible Bool isWithinTry => parentTry != null
    
    visible ClassDeclaration parentClass => parent?.parentClass
    visible Bool isWithinClass => parentClass != null
    
    /// Create a new Node. Initializes the data.
    /// 
    /// parent:   The Node to act as the parent temporarily.
    /// location: The location of the Node in the source file.
    public construct(public var Node parent = null, visible var Location location = Location.INVALID) {}
    
    [Override]
    public addAnnotation(Annotation annotation) {
        annotations = annotations ?: new Annotation[]
        
        annotations.add(annotation)
        
        annotation.parent = this
    }
    
    /// Detach the specified node from its parent.
    public detach() {
        if (isDecoding) return
        
        detach(parent)
    }
    
    /// Detach the specified Node from the given Node.
    ///
    /// fromNode: The Node to detach the specified Node from.
    private detach(Node fromNode) {
    	let p = parent
    	
        parent = null
        
        p.onChildDetached(this)
        onRemoved(fromNode)
    }
    
    public addChild(Node child) {
        child.parent = this
        
        child?.onAdded(this)
    }
    
    public addGlobalNode(Node child) => false {
        if (child.class.isOfType(Comment)) {
            parentFile.pendingComments.add((Comment)child)
            
            return true
        } else if (child.class.isOfType(ExternalBlock)) {
            
            
            return true
        }
    }
    
    public onAdded(Node parent) {}
    public onRemoved(Node from) {}
    
    public onAfterDecoded() => true
    public onNextStatementDecoded(Node next) => true
    public onStackPopped() {}
    public followedByScope(Bool scope) {}
    public onChildReplaced(Node old, Node replacement) {}
    public onReplaced(Node parent, Node replacement) {}
    public onChildDetached(Node child) {}
    
    /// Validate the node to make last minute changes or error checking.
    /// 
    /// phase:  The phase that the node is being validated in.
    /// return: The Node to continue the validation off of.
    public validate(Int phase) -> ValidationResult {
        return annotations?.reverse().firstNonNull({
            ValidationResult result = _.validate(phase)
            
            return result.skipValidation ? result : null
        }) ?: new ValidationResult(this)
        
        /*return annotations?.reverse()
            .firstNonNull({ (let result = _.validate(phase)).skipValidation ? result : null }) ?:
            new ValidationResult(this)*/
    }
    
    public generateTemporaryScopeNode() -> Node =>
        throw new UnimplementedOperationException("#this.class does not implement generateTemporaryScopeNode #locationInfo")
    
    public static catchSyntaxErrors(action()) {
        try {
            action()
        } catch (SyntaxErrorException e) {
            Console.log(e)
        }
    }
    
    checkCircular() {
        if (var current = parent) {
            while (current = current.parent) {
                if (current == parent) {
                    parent = null
                    
                    throw new Exception("Circular reference created.........!");
                }
            }
        }
    }
    
    /// Return a new Node containing a copy of the values of the
    /// specified node, including clones of the children.
    /// 
    /// parent:        The Node to set as the parent.
    /// location:      The Location instance holding the information.
    /// cloneChildren: Whether or not to clone the children of the
    ///                Node as well.
    /// return:        A clone of the specified Node.
    public clone(Node parent = parent, Location location = location, Bool cloneChildren = true) =>
        cloneTo(new Node(parent, location))
    
    public cloneTo(Node other) => other {
        other.parent = parent
        other.location = location
        other.annotations = annotations
    }
    
    public replace(Node toReplace, Node replacement) => false
    public validateTypes() => true
}