package "novex/astro/tree/nodes"

import "novex/astro/SyntaxErrorException"
import "novex/astro/util/Location"
import "novex/astro/tree/nodes/operations/Assignable"

import "novex/astro/util/CompilerStringFunctions"

/// @Value extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class Identifier extends Value implements Accessible, Assignable {
    public String name
    
    /// Create a new Identifier node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Identifier node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID, public String name = null) {
        super(parent, location)
    }
    
    /// Parse the given input into a Identifier node. If the input cannot be parsed
    /// into a Identifier node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * correctGrammar
    ///      * INCORrect_grammaR_but_123123STILL_workz
    ///      * identifierName4
    /// 
    /// input:    The input string to parse into a Identifier instance.
    /// parent:   The parent of the Identifier node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Identifier node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Identifier => null {
        if (input.isIdentifier) {
            return new Identifier(parent, location, input)
        }
    }
    
    public writeNova() => name + writeArrayAccess() + writeAccessedNodes()
    
    public cloneTo(Identifier other) => other {
        super.cloneTo(other)
        
        other.name = name
    }
}