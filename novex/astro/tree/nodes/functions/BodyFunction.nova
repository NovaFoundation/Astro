package "novex/astro/tree/nodes/functions"

import "novex/astro/InvalidParseException"
import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/ScopeDeclaration"
import "novex/astro/tree/nodes/Type"
import "novex/astro/tree/nodes/Scope"
import "novex/astro/tree/nodes/Return"
import "novex/astro/tree/nodes/Value"
import "novex/astro/util/Location"
import "novex/astro/SyntaxMessage"

import "novex/astro/util/CompilerStringFunctions"

class BodyFunction extends FunctionDeclaration implements ScopeDeclaration {
    visible var Node inlineBody
    
    visible var Bool implicitType = false
    
    /// Create a new BodyFunction node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the BodyFunction node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        scope = new Scope(this, location)
    }
    
    public addChild(Node child) {
        if (!addGlobalNode(child)) {
            scope.children.add(child)
        }
        
        super.addChild(child)
    }
    
    public generateTemporaryScopeNode() -> Node {
        return new Scope(this)
    }
    
    public cloneTo(BodyFunction other) => other {
        super.cloneTo(other)
        
        other.scope = scope
        other.inlineBody = inlineBody
        other.implicitType = implicitType
    }
}