package "novex/astro/tree/nodes/functions"

import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/Identifier"
import "novex/astro/InvalidParseException"
import "novex/astro/tree/nodes/annotations/Annotation"
import "novex/astro/tree/AnnotationSearchResult"
import "novex/astro/tree/nodes/generics/GenericParameter"
import "novex/astro/tree/nodes/generics/GenericCompatible"
import "novex/astro/tree/nodes/Value"
import "novex/astro/tree/SyntaxTree"
import "novex/astro/SyntaxMessage"

import "novex/astro/util/CompilerStringFunctions"

trait CallableFunction extends Identifier implements GenericCompatible {
    visible ParameterList parameterList
    visible Parameter[] parameters => parameterList.parameters
    
    public parseParameter(String parameter, Bool require = true) =>
        Parameter.parse(parameter, parameterList, ((Node)this).location)
    
    public parseParameterAndAnnotations(String parameter, Bool require = true) => false {
        var annotations = SyntaxTree.searchAnnotations(parameter)
        var param = parseParameter(annotations.remainingStatement, require)
        
        if (param != null) {
            parameters.add(param)
            annotations.addTo(param)
            
            return true
        }
        
        SyntaxMessage.errorIf("Invalid parameter '#parameter'", (Node)this, require)
    }
    
    public parseParameters(String parameters, Bool require = true) =>
        parameters.splitAtCommas().all({ parseParameterAndAnnotations(_, require) }, false)
    
    public compatibleArguments(Value[] arguments) -> Bool {
        return true
    }
    
    public parseName(String name) => false {
        if (!parseGenericParameters(name)) {
            toss new InvalidParseException("Unable to parse generic parameters for class '#name'", (Node)this)
        } else {
            if (genericParameters.count > 0) {
                name = name.substring(end: name.indexOf('<')).trim()
            }
            
            ((Identifier)this).name = name
            
            return name.isIdentifier
        }
    }
}