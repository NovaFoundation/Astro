package "novex/astro/tree/nodes/functions/closures"

import "nova/datastruct/list/Stack"

import "novex/astro/SyntaxErrorException"
import "novex/astro/InvalidParseException"
import "novex/astro/util/Location"
import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/Scope"
import "novex/astro/tree/nodes/ScopeDeclaration"
import "novex/astro/tree/nodes/Value"
import "novex/astro/tree/nodes/ClassDeclaration"
import "novex/astro/tree/nodes/variables/VariableDeclaration"
import "novex/astro/tree/nodes/functions/Parameter"
import "novex/astro/tree/nodes/functions/ParameterList"
import "novex/astro/tree/nodes/functions/FunctionCall"
import "novex/astro/tree/nodes/functions/FunctionDeclaration"
import "novex/astro/tree/nodes/functions/CallableFunction"

import "novex/astro/util/CompilerStringFunctions"

/// @Node extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class LambdaExpression extends Value implements CallableFunction, ScopeDeclaration {
    visible Int index =>
        parentFunctionCall.arguments.indexOf(this, defaultReturnValue: parentFunctionCall.arguments.count)
    
    visible LambdaExpression parentLambda => this
    
    /// Create a new LambdaExpression node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the LambdaExpression node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        this.scope = new Scope(this, location)
        this.parameterList = new ParameterList(this, location)
    }
}