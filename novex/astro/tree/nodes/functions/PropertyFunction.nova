package "novex/astro/tree/nodes/functions"

import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/Scope"
import "novex/astro/util/Location"
import "novex/astro/SyntaxMessage"

import "novex/astro/util/CompilerStringFunctions"

class PropertyFunction extends BodyFunction {
    /// Create a new PropertyFunction node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the PropertyFunction node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a PropertyFunction node. If the input cannot be parsed
    /// into a PropertyFunction node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a PropertyFunction instance.
    /// parent:   The parent of the PropertyFunction node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed PropertyFunction node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> PropertyFunction => null {
        var PropertyFunction node = null
        
        until (node) {
            node = AccessorFunction.parse(input, parent, location, require)
            node = MutatorFunction.parse(input, parent, location, require)
        }
        
        return node
    }
}