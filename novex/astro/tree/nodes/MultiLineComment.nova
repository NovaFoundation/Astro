package "novex/astro/tree/nodes"

import "novex/astro/SyntaxErrorException"
import "novex/astro/InvalidParseException"
import "novex/astro/util/Location"

import "novex/astro/util/CompilerStringFunctions"

/// @Node extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
[AutoFinal]
class MultiLineComment extends Comment {
    /// Create a new MultiLineComment node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the MultiLineComment node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID, public String contents = null) {
        super(parent, location, contents)
    }
    
    /// Parse the given input into a MultiLineComment node. If the input cannot be parsed
    /// into a MultiLineComment node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a MultiLineComment instance.
    /// parent:   The parent of the MultiLineComment node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed MultiLineComment node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> MultiLineComment => null {
        if (input.startsWith("/*")) {
            let iterator = parent.parentFile.statements
            
            if ((let end = iterator.remainingSource.indexOf("*/")) > 0) {
                let contents = iterator.source.substring(iterator.startPosition, iterator.position + end)
                
                iterator.skipForward(end + 2)
                iterator.beginsScope = false
                iterator.endsScope = false
                
                return new MultiLineComment(parent, location, contents)
            }
        }
    }
}