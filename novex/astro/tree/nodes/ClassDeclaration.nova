package "novex/astro/tree/nodes"

import "nova/regex/Pattern"
import "nova/datastruct/list/ImmutableArray"

import "novex/astro/SyntaxErrorException"
import "novex/astro/InvalidParseException"
import "novex/astro/SyntaxMessage"
import "novex/astro/util/Location"
import "novex/astro/tree/nodes/generics/GenericParameter"
import "novex/astro/tree/nodes/generics/GenericCompatible"
import "novex/astro/tree/nodes/variables/InstanceDeclaration"
import "novex/astro/tree/nodes/variables/VariableDeclaration"
import "novex/astro/tree/nodes/variables/FieldDeclaration"
import "novex/astro/tree/nodes/variables/ArrayBracketOverload"
import "novex/astro/tree/nodes/functions/FunctionDeclaration"
import "novex/astro/tree/nodes/functions/Constructor"
import "novex/astro/tree/nodes/functions/BodyFunction"

import "novex/astro/util/CompilerStringFunctions"

/// @InstanceDeclaration extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
class ClassDeclaration extends InstanceDeclaration implements Abstractable, GenericCompatible {
    visible String identifier => "class"
    
    visible ClassDeclaration parentClass => this
    
    visible String location =>
        parentFile.packageDeclaration.location ?
            parentFile.packageDeclaration.location + "/" + name :
            name
    
    public Type extendedClass
    public Type[] implementedInterfaces = new Type[0]
    
    public FieldDeclaration[] fields = new FieldDeclaration[]
    public FunctionDeclaration[] functions = new FunctionDeclaration[]
    
    public immutable Constructor[] constructors => functions.filter({ _.class.isOfType(Constructor) })
    
    visible ArrayBracketOverload arrayBracketOverload
    
    visible Bool isPrivate => visibility.count > 0 && super.isPrivate
    visible Bool isPublic => visibility.count == 0 || super.isPublic
    
    /// Create a new ClassDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the ClassDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        genericParameters = new GenericParameter[0]
    }
    
    public addChild(Node child) {
        if (addGlobalNode(child)) {
            
        } else if (child.class.isOfType(FieldDeclaration)) {
            fields.add(child)
        } else if (child.class.isOfType(FunctionDeclaration)) {
            functions.add(child)
        } else if (child.class.isOfType(ArrayBracketOverload)) {
            if (!arrayBracketOverload) {
                arrayBracketOverload = child
            } else {
                SyntaxErrorException("Array bracket overload already declared for class '#location'", child)
            }
        } else {
            SyntaxMessage.error("Statement '#child' used in wrong context", child)
        }
        
        super.addChild(child)
    }
    
    public replace(Node toReplace, Node replacement) -> Bool =>
        toReplace.class.isOfType(FieldDeclaration) &&
            fields.replace((FieldDeclaration)toReplace, (FieldDeclaration)replacement) ||
        toReplace.class.isOfType(FunctionDeclaration) &&
            functions.replace((FunctionDeclaration)toReplace, (FunctionDeclaration)replacement)
    
    public findCompatibleFunctions(String name, Value[] argumentTypes = null) =>
        functions.filter(func => {
            func.name.equals(name) &&
            (!argumentTypes || func.compatibleArguments(argumentTypes))
        })
    
    public findFunction(String name, Bool searchAncestors = true) -> FunctionDeclaration => null {
        FunctionDeclaration function
        
        if (function = functions.firstWhere({ _.name.equals(name) })) {
            return function
        }
        
        if (searchAncestors) {
            if (function = extendedClass?.getClass(parentFile)?.findFunction(name)) {
                return function
            } else if (function = implementedInterfaces.firstNonNull({ _.getClass(parentFile)?.findFunction(name) })) {
                return function
            }
        }
    }
    
    public parseStatement(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Node {
        Node node = null
        
        until (node) {
            node = Constructor.parse(input, this, location, require)
            node = BodyFunction.parse(input, this, location, require)
            node = FieldDeclaration.parse(input, this, location, require)
            node = ArrayBracketOverload.parse(input, this, location, require)
        }
        
        return node
    }
    
    public generateTemporaryScopeNode() -> Node {
        return new BodyFunction(this)
    }
    
    public writeHeader() =>
        "#identifier #{name}#writeGenericParameters() #writeExtension() #writeImplementedInterfaces()".replace(/\s+/, " ").trim()
    
    public writeExtension() =>
        extendedClass ?
            "extends #extendedClass" :
            ""
    
    public writeImplementedInterfaces() =>
        implementedInterfaces.count > 0 ?
            "implements #{implementedInterfaces.join(", ")}" :
            ""
    
    public writeArrayBracketOverload() =>
        arrayBracketOverload ?
            "\n" + arrayBracketOverload.toNova() + "\n" :
            ""
    
    public writeFields() => fields.map({ '\n' + _.toNova() }).join() + (fields.count > 0 ? "\n" : "")
    public writeFunctions() => functions.map({ '\n' + _.toNova() + '\n' }).join()
    
    public toNova() =>
        writeHeader() + " {" +
        writeArrayBracketOverload() +
        writeFields() +
        writeFunctions() + "}"
    
    [Override]
    public toString() => writeHeader()
    
    public cloneTo(ClassDeclaration other) => other {
        super.cloneTo(other)
        GenericCompatible.super.cloneTo(other)
        Abstractable.super.cloneTo(other)
        
        other.extendedClass = extendedClass
        other.implementedInterfaces = implementedInterfaces
        other.fields = fields
        other.functions = functions
        other.arrayBracketOverload = arrayBracketOverload
    }
}