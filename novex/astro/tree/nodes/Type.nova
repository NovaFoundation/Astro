package "novex/astro/tree/nodes"

import "novex/astro/SyntaxMessage"
import "novex/astro/InvalidParseException"
import "novex/astro/util/Location"
import "novex/astro/tree/nodes/generics/GenericType"
import "novex/astro/tree/nodes/generics/GenericArgument"
import "novex/astro/tree/nodes/generics/GenericParameter"

import "novex/astro/util/CompilerStringFunctions"

[AutoFinal]
class Type {
    visible Bool isGeneric => false
    visible Bool isPrimitiveType => PRIMITIVE_TYPES.contains(name)
    
    visible static String[] PRIMITIVE_TYPES = ["Bool", "Byte", "Short", "Int", "Long", "Float", "Double", "Char"]
    
    visible var GenericArgument[] genericArguments = new GenericArgument[0]
    
    public var String name
    
    public getClass(NovaFile file) =>
        file.imports.firstWhere({ _.className == name })?.classDeclaration
    
    public construct(public var String name = null) {}
    
    public isValid(Node parent) =>
        isPrimitiveType ||
        parent.parentFile.imports.any({ _.className.equals(name) })
    
    public cloneTo(Type other) => other {
        other.name = name
        other.genericArguments = genericArguments
    }
}