package "novex/astro/tree/nodes/operations"

import "nova/datastruct/HashMap"

import "novex/astro/SyntaxErrorException"
import "novex/astro/InvalidParseException"
import "novex/astro/SyntaxMessage"
import "novex/astro/tree/nodes/Value"
import "novex/astro/tree/nodes/Node"
import "novex/astro/util/Location"

import "novex/astro/util/CompilerStringFunctions"

class UnaryOperation extends Value {
    visible static Byte LEFT = -1, EITHER = 0, RIGHT = 1
    
    visible Byte operatorSide
    
    public Operator operator
    public Value operand
    
    /// Create a new UnaryOperation node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the UnaryOperation node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    public writeNova() =>
        operatorSide == LEFT ?
            "#{operator.toNova()}#{operand.toNova()}" :
            "#{operand.toNova()}#{operator.toNova()}"
    
    // visible static HashMap<String, Int> SIDES
    // visible static HashMap<String, Bool> REQUIRE_VARIABLE
    
    // /**
    //  * Initialize the SIDES HashMap.
    //  */
    // static {
    //     SIDES = new HashMap()
    //     REQUIRE_VARIABLE = new HashMap()
        
    //     SIDES["-"]  = LEFT
    //     SIDES["--"] = EITHER
    //     SIDES["++"] = EITHER
    //     SIDES["!"]  = LEFT
    //     SIDES["~"]  = LEFT
        
    //     REQUIRE_VARIABLE["-"]  = false
    //     REQUIRE_VARIABLE["--"] = true
    //     REQUIRE_VARIABLE["++"] = true
    //     REQUIRE_VARIABLE["!"]  = false
    //     REQUIRE_VARIABLE["~"]  = false
    // }
}