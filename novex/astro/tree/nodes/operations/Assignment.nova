package "novex/astro/tree/nodes/operations"

import "novex/astro/SyntaxMessage"
import "novex/astro/tree/nodes/Value"
import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/Type"
import "novex/astro/tree/nodes/variables/LocalDeclaration"
import "novex/astro/tree/nodes/variables/Variable"
import "novex/astro/tree/nodes/variables/ImplicitDeclaration"
import "novex/astro/tree/nodes/variables/VariableDeclaration"
import "novex/astro/util/Location"

import "novex/astro/util/CompilerStringFunctions"

class Assignment extends Operation {
    public Value assigned <=> operands[0]
    public Value assignment <=> operands[1]
    
    public Node scopeConsumer => assignment ? assignment.returnedNode : null
    
    visible Type type => assignment.returnedNode.type
    
    visible VariableDeclaration assignedDeclaration =>
        assigned.class.isOfType(VariableDeclaration) ?
            (VariableDeclaration)assigned :
            ((Variable)assigned).declaration
    
    /// Create a new Assignment node.
    /// 
    /// #exampleInputs
    /// 
    /// parent: The parent of the Assignment node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
        
        operands = new Value[2]
    }
}