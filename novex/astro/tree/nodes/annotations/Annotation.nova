package "novex/astro/tree/nodes/annotations"

import "novex/astro/SyntaxErrorException"
import "novex/astro/tree/nodes/Node"
import "novex/astro/util/Location"

import "novex/astro/util/CompilerStringFunctions"

/// @Node extension that represents
///
/// author: Braden Steffaniak
class Annotation extends Node {
    visible String label =>
        this.class.name.endsWith("Annotation") ?
            this.class.name.trimEnd("Annotation".count) :
            null
    
    visible static immutable Class<Node>[] applicationTypes => null
    
    final visible static immutable Class<Annotation>[] ANNOTATIONS
    
    static {
        let array = new Class<Annotation>[]
        
        Class.ALL.filter({ _.isOfType(Annotation) }).forEach({
            array.add(_)
        })
        
        ANNOTATIONS = array.toImmutable()
    }
    
    visible Bool isModifier => this.class.isOfType(Modifier) && ((Modifier)this).alias
    
    /// Create a new Annotation node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Annotation node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    public onApplied(Node toNode, Bool throwError = true) => true
    
    public checkApplication(Node toNode, Bool throwError = true) => true {
        if (applicationTypes && !applicationTypes.any({ toNode.class.isOfType(_) })) {
            if (throwError) {
                invalidApplication(toNode)
            } else {
                return false
            }
        }
    }
    
    public invalidApplication(Node toNode) {
        throw new SyntaxErrorException("#this.class.location cannot be applied to #toNode.class.location", this)
    }
}