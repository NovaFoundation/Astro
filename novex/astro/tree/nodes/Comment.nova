package "novex/astro/tree/nodes"

import "novex/astro/SyntaxErrorException"
import "novex/astro/InvalidParseException"
import "novex/astro/util/Location"

import "novex/astro/util/CompilerStringFunctions"

/// @Node extension that represents 
///
/// author: Braden Steffaniak
/// since: 
/// version: 
[AutoFinal]
class Comment extends Node {
    public String contents
    
    /// Create a new Comment node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the Comment node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID, public String contents = null) {
        super(parent, location)
    }
    
    /// Parse the given input into a Comment node. If the input cannot be parsed
    /// into a Comment node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * 
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a Comment instance.
    /// parent:   The parent of the Comment node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed Comment node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Comment => null {
        var Comment node = null
        
        until (node) {
            node = NovaDocComment.parse(input, parent, location, require)
            node = SingleLineComment.parse(input, parent, location, require)
            node = MultiLineComment.parse(input, parent, location, require)
        }
        
        return node
    }
}