package "novex/astro/tree/nodes/variables"

import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/Value"
import "novex/astro/tree/nodes/functions/BodyFunction"
import "novex/astro/tree/nodes/functions/PropertyFunction"
import "novex/astro/tree/nodes/functions/AccessorFunction"
import "novex/astro/tree/nodes/functions/MutatorFunction"
import "novex/astro/tree/nodes/operations/Assignable"
import "novex/astro/SyntaxErrorException"
import "novex/astro/SyntaxMessage"
import "novex/astro/util/Location"

import "novex/astro/util/CompilerStringFunctions"

class FieldDeclaration extends InstanceDeclaration implements Assignable {
    String[] extraDeclarations
    
    public Value initializationValue
    
    visible Value accessorValue
    
    visible Bool isTwoWayAccessor = false
    
    visible var AccessorFunction accessor
    visible var MutatorFunction mutator
    
    /// Create a new FieldDeclaration node.
    /// #exampleInputs
    /// 
    /// parent:   The parent of the FieldDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    public addChild(Node child) {
        if (addGlobalNode(child)) {
            
        } else if (child.class.isOfType(AccessorFunction)) {
            accessor = (AccessorFunction)child
        } else if (child.class.isOfType(MutatorFunction)) {
            mutator = (MutatorFunction)child
        } else {
            SyntaxMessage.error("Statement '#child' used in wrong context", child)
        }
    }
    
    public generateTemporaryScopeNode() -> Node {
        return new BodyFunction(this)
    }
    
    public onAdded(Node to) {
        super.onAdded(to)
        
        if (extraDeclarations) {
            for (name in extraDeclarations) {
                let declaration = cloneTo(new FieldDeclaration(parent, location))
                declaration.name = name
                declaration.extraDeclarations = null
                
                to.addChild(declaration)
            }
        }
    }
    
    public writeInitializationValue() => initializationValue ? " = #initializationValue.toNova()" : ""
    public writeAccessorValue() =>
        accessorValue ?
            (isTwoWayAccessor ? " <=> " : " => ") + accessorValue.toNova() :
            ""
    
    public writePropertyFunctions() => "" {
        if (accessor || mutator) {
            var output = " {"
            
            if (accessor) {
                output += "\n" + accessor.writeNova() + "\n"
            }
            if (mutator) {
                output += "\n" + mutator.writeNova() + "\n"
            }
            
            return output + "}"
        }
    }
    
    public writeNova() => super.writeNova() + writeInitializationValue() + writeAccessorValue() + writePropertyFunctions()
    
    public cloneTo(FieldDeclaration other) => other {
        super.cloneTo(other)
        
        other.initializationValue = initializationValue
        other.accessorValue = accessorValue
        other.isTwoWayAccessor = isTwoWayAccessor
        other.extraDeclarations = extraDeclarations
    }
}