package "novex/astro/tree/nodes/variables"

import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/Value"
import "novex/astro/tree/nodes/Type"
import "novex/astro/tree/nodes/annotations/Modifier"
import "novex/astro/tree/nodes/annotations/VarAnnotation"
import "novex/astro/tree/nodes/annotations/LetAnnotation"
import "novex/astro/InvalidParseException"
import "novex/astro/util/Location"

import "novex/astro/util/CompilerStringFunctions"

class ImplicitDeclaration extends LocalDeclaration {
    visible Bool isImplicit => true
    
    visible Value implicitReference
    
    visible static Value DEFAULT_IMPLICIT_REFERENCE = new Value(type: Type.parse("Object"))
    
    public Type type => implicitReference.type
    
    visible static immutable Class<Modifier>[] IMPLICIT_ANNOTATIONS = [VarAnnotation, LetAnnotation]
    visible static immutable String[] IMPLICIT_ANNOTATION_ALIASES = IMPLICIT_ANNOTATIONS.reduce((v, a) => (Array)v + a.propertyMap.aliases().toMutable(), new String[0])
    
    /// Create a new ImplicitDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the ImplicitDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    /// Parse the given input into a ImplicitDeclaration node. If the input cannot be parsed
    /// into a ImplicitDeclaration node, null is returned.
    /// 
    /// #exampleInputs:
    ///     Example inputs:
    ///      * var node = new ImplicitDeclaration(parent, location)
    ///      * 
    ///      * 
    /// 
    /// input:    The input string to parse into a ImplicitDeclaration instance.
    /// parent:   The parent of the ImplicitDeclaration node.
    /// location: The location of the input text in the source file.
    /// require:  Whether or not to throw a syntax error if the input could not
    ///           be parsed.
    /// return:   The parsed ImplicitDeclaration node, if successful; null otherwise.
    public static parse(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> ImplicitDeclaration => null {
        var words = input.splitValues()
        
        if (words.containsAny(IMPLICIT_ANNOTATION_ALIASES)) {
            let node = new ImplicitDeclaration(parent, location)
            
            words = node.parseModifiersAndGetRemaining(words)
            
            if (words.count != 1) {
                toss new InvalidParseException("Invalid implicit declaration '#input'", node)
            } else {
                node.name = words.first
                
                if (!node.name.isIdentifier) {
                    toss new InvalidParseException("Invalid implicit declaration name '#node.name'", node)
                } else {
                    node.implicitReference = DEFAULT_IMPLICIT_REFERENCE
                    
                    return node
                }
            }
        }
    }
    
    public writeType() => ""
    
    public cloneTo(ImplicitDeclaration other) => other {
        super.cloneTo(other)
        
        other.implicitReference = implicitReference
    }
}