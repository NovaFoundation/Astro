package "novex/astro/tree/nodes/variables"

import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/Value"
import "novex/astro/tree/nodes/Type"
import "novex/astro/tree/nodes/annotations/Modifier"
import "novex/astro/tree/nodes/annotations/VarAnnotation"
import "novex/astro/tree/nodes/annotations/LetAnnotation"
import "novex/astro/InvalidParseException"
import "novex/astro/util/Location"

import "novex/astro/util/CompilerStringFunctions"

class ImplicitDeclaration extends LocalDeclaration {
    visible Bool isImplicit => true
    
    visible Value implicitReference
    
    visible static Value DEFAULT_IMPLICIT_REFERENCE = new Value(type: Type.parse("Object"))
    
    public Type type => implicitReference.type
    
    visible static immutable Class<Modifier>[] IMPLICIT_ANNOTATIONS = [VarAnnotation, LetAnnotation]
    visible static immutable String[] IMPLICIT_ANNOTATION_ALIASES = IMPLICIT_ANNOTATIONS.reduce((v, a) => (Array)v + a.propertyMap.aliases().toMutable(), new String[0])
    
    /// Create a new ImplicitDeclaration node.
    /// 
    /// #exampleInputs
    /// 
    /// parent:   The parent of the ImplicitDeclaration node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
        super(parent, location)
    }
    
    public writeType() => ""
    public writeNova() => name
    
    public cloneTo(ImplicitDeclaration other) => other {
        super.cloneTo(other)
        
        other.implicitReference = implicitReference
    }
}