package "novex/astro/tree"

import "nova/datastruct/HashMap"
import "nova/datastruct/list/Stack"
import "nova/datastruct/list/List"
import "nova/datastruct/list/EmptyStackException"
import "nova/time/Timer"
import "nova/thread/Thread"

import "novex/astro/SyntaxMessage"
import "novex/astro/Astro"
import "novex/astro/SyntaxErrorException"
import "novex/astro/error/UnimplementedOperationException"
import "novex/astro/util/Location"
import "novex/astro/tree/nodes/Program"
import "novex/astro/tree/nodes/Node"
import "novex/astro/tree/nodes/NovaFile"
import "novex/astro/tree/nodes/ClassDeclaration"
import "novex/astro/tree/nodes/annotations/Annotation"

import "novex/astro/util/CompilerStringFunctions"

[AutoFinal]
class SyntaxTree {
    visible Program root
    
    visible Astro astro
    
    visible HashMap<String, Long> compileTimes = new HashMap<String, Long>()
    
    public construct(Astro astro, Program root) {
        this.astro = astro
        this.root = root
        
        root.tree = this
    }
    
    public groupFiles() => root.files.map({ return [_] })
    
    public processFiles(func(NovaFile)) {
        if (astro.compiler.flags["single-thread"]) {
            root.files.forEach(func)
        } else {
            let tasks = groupFiles().map(files => {
                Async.request({
                    files.forEach(func)
                })
            })
            
            tasks.forEach({ _.waitForCompletion() })
        }
    }
    
    public formTree() {
        processFiles(file => {
            Console.log("Forming tree for file '#file'")
            
            let timer = new Timer().start()
            
            let parents = new Stack<Node>([file])
            
            let statements = file.source.getStatements(parents)
            file.statements = statements
            
            for (statement in statements) {
                if (parents.isEmpty) break
                    
                let full = statement
                
                var Node node = null
                
                let annotations = searchAnnotations(statement)
                
                annotations.addTo(file.pendingAnnotations)
                
                statement = annotations.remainingStatement
                
                let parent = parents.peek()
                let location = new Location(statements.startNewlineCount, statements.startPosition - statements.startNewlinePosition - 1, statements.startPosition, statements.endPosition)
                
                if (statement.count > 0) {
                    try {
                        node = parent.parseString(statement, parent, location: location, require: false)
                    } catch (SyntaxErrorException e) {
                        Console.log(e)
                        
                        node = null
                    } catch (UnimplementedOperationException e) {
                        Console.log(e)
                        
                        node = null
                    }
                    
                    if (!node) {
                        // Console.writeLine("'#full'")
                        // Console.writeLine("\tbeginsScope: '#statements.beginsScope'\n
                        //                    \tendsScope: '#statements.endsScope'\n
                        //                    \tparse: '#node'\n")
                    }
                    
                    if (node) {
                        while (!file.pendingAnnotations.isEmpty) {
                            node.addAnnotation(file.pendingAnnotations.pop())
                            
                            // Console.writeLine("Added annotation '#node.annotations.last'")
                            
                            // if (file.pendingAnnotations.isEmpty) {
                            //     Console.writeLine()
                            // }
                        }
                        
                        parent.addChild(node)
                    }
                } else {
                    // Console.writeLine("Only parsed annotation\n")
                }
                
                if (statements.beginsScope) {
                    if (!node) {
                        SyntaxMessage.error("Unable to parse scope declaration '#statement'", parent ?: root, location, throwException: false)
                        
                        try {
                            node = parent.generateTemporaryScopeNode()
                        } catch (UnimplementedOperationException e) {
                            Console.log(e)
                            
                            break
                        }
                    }
                    
                    parents.push(node)
                }
                if (statements.endsScope) {
                    try {
                        for (e in 0..statements.scopesEnded) {
                            if (!parents.isEmpty) {
                                parents.pop()
                            }
                        }
                    } catch (EmptyStackException ex) {
                        Console.log("Too many ending braces in file '#file'")
                    }
                }
            }
            
            if (parents.peek() != file) {
                SyntaxMessage.error("Missing ending brace", file, throwException: false)
            }
            
            Console.log("#file took #{timer.stop().duration}ms")
            
            Thread.sync({ compileTimes[file.fileLocation] = timer.duration })
        })
    }
    
    public static searchAnnotations(var String statement) -> AnnotationSearchResult {
        let result = new AnnotationSearchResult(statement)
        var annotation = Annotation.parse(input: statement, require: false)
        
        while (annotation && statement.count > 0) {
            statement = annotation.getRemainingStatement(statement)
            result.annotations.add(annotation)
            result.remainingStatement = statement
            
            // Console.writeLine("Parsed Annotation #annotation")
            
            if (statement.count > 0) annotation = Annotation.parse(statement)
        }
        
        return result
    }
}