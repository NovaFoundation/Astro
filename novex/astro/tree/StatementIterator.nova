package "novex/astro/tree"

import "nova/datastruct/list/NoSuchElementException"
import "nova/datastruct/list/Iterator"
import "nova/datastruct/list/Stack"
import "nova/regex/Pattern"

import "novex/astro/util/CompilerStringFunctions"
import "novex/astro/tree/nodes/Node"

class StatementIterator implements Iterator<String> {
    static Char[] NON_STATEMENT_CHARS = [ ' ', '\n', '\t', '\r', '}' ]
    
    visible String source
    
    visible String remainingSource => source.substring(position)
    
    visible Int startNewlineCount, endNewlineCount
    visible Int startNewlinePosition, endNewlinePosition
    visible Int startPosition, endPosition, position
    
    visible Bool beginsScope, endsScope
    
    visible Int scopesEnded
    
    Stack<Node> parents
    
    visible Bool hasNext {
        get {
            if (source.count > position) {
                for (i in position..source.count) {
                    if (!NON_STATEMENT_CHARS.contains(source[i])) {
                        return true
                    }
                }
            }
            
            return false
        }
        
        no set
    }
    
    visible String next {
        get {
            if (hasNext) {
                startNewlineCount = endNewlineCount
                startNewlinePosition = endNewlinePosition
                
                startPosition = source.nextNonWhitespaceIndex(position)
                
                checkNewline(position, startPosition, {
                    startNewlineCount++
                    startNewlinePosition = _
                })
                
                position = source.calculateStatementEnd(startPosition)
                position = position < 0 ? source.count : position
                
                endPosition = position
                
                checkNewline(startPosition, endPosition, {
                    startNewlineCount++
                })
                
                updateScopeProperties()
                
                endNewlineCount = startNewlineCount
                endNewlinePosition = startNewlinePosition
                
                checkNewline(endPosition, position, {
                    endNewlineCount++
                    endNewlinePosition = _
                })
                
                return source.substring(startPosition, endPosition).trim()
            }
            
            throw new NoSuchElementException()

            return null
        }
        
        no set
    }
    
    updateScopeProperties() {
        var nextIndex  = source.nextNonWhitespaceIndex(position)
        var nextChar   = source[nextIndex]
        var afterIndex = source.nextNonWhitespaceIndex(nextIndex + 1)
        var charAfter  = source[afterIndex]
        
        beginsScope = position < source.count && nextChar == '{'
        endsScope   = position < source.count && nextChar == '}'
        
        scopesEnded = 0
        
        if (!endsScope && charAfter == '}') {
            endsScope = true
            position = afterIndex
        }
        
        if (endsScope) {
            var current = source.nextNonWhitespaceIndex(position)
            
            while (current > 0 && source[current] == '}') {
                scopesEnded++
                
                current = source.nextNonWhitespaceIndex(current + 1)
            }
            
            position = current < 0 ? source.count : current
        } else {
            position++
        }
    }
    
    public construct(String source, Stack<Node> parents) {
        this.source = source.trim()
        this.parents = parents
        
        reset()
    }
    
    public skipForward(Int charCount) => skipTo(position + charCount)
    
    public skipTo(Int index) {
        checkNewline(position, index, {
            endNewlineCount++
            endNewlinePosition = _
        })
        
        position = index
    }
    
    checkNewline(Int start, Int end, action(Int)) {
        var offset = start
        
        for (i in start..end) {
            let c = source[i]
            
            switch (c)
                '\n' => action(offset)
                '\r' => continue
            
            offset++
        }
    }
    
    public reset() => this { position = 0 }
}