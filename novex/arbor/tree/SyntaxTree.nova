package "novex/arbor/tree"

import "nova/datastruct/list/Stack"
import "nova/datastruct/list/List"
import "nova/datastruct/list/EmptyStackException"

import "novex/arbor/SyntaxMessage"
import "novex/arbor/Arbor"
import "novex/arbor/SyntaxErrorException"
import "novex/arbor/tree/nodes/Program"
import "novex/arbor/tree/nodes/Node"
import "novex/arbor/tree/nodes/NovaFile"
import "novex/arbor/tree/nodes/ClassDeclaration"
import "novex/arbor/tree/nodes/annotations/Annotation"

import "novex/arbor/util/CompilerStringFunctions"

[AutoFinal]
class SyntaxTree {
    visible Program root
    
    Stack<Annotation> pendingAnnotations
    Stack<Node> parents
    
    visible Arbor compiler
    
    NovaFile[][] fileGroups
    
    public construct(Arbor compiler, Program root) {
        pendingAnnotations = new Stack()
        parents = new Stack()
        
        this.compiler = compiler
        this.root = root
        
        fileGroups = new NovaFile[][]
        fileGroups.add(root.files)
        
        root.tree = this
    }
    
    // var tempL(NovaFile file)
    
    public processFiles(func(NovaFile)) {
        // this.tempL = func
        
        // let requests = new Task[]
        
        // fileGroups.forEach(files => {
        //     requests.add(Async.request({
        //         files.forEach(file => {
        //             tempL(file)
        //         })
        //     }))
        // })
        
        // requests.forEach({ _.waitForCompletion() })
        
        root.files.forEach(func)
    }
    
    public formTree() {
        processFiles(file => {
            Console.log("Forming tree for file '#file'")
            
            var statements = file.source.getStatements(parents)
            
            parents.push(file)
            
            for (statement in statements) {
                if (parents.isEmpty) break
                    
                let full = statement
                
                var Node node = null
                
                let annotations = searchAnnotations(statement)
                
                annotations.addTo(pendingAnnotations)
                
                statement = annotations.remainingStatement
                
                let parent = parents.peek()
                
                if (statement.count > 0) {
                    try {
                        node = parent.parseStatement(statement, parent, require: false)
                    } catch (SyntaxErrorException e) {
                        Console.log(e)
                        
                        node = null
                    }
                    
                    if (!node) {
                        Console.writeLine("'#full'")
                        Console.writeLine("\tbeginsScope: '#statements.beginsScope'\n
                                           \tendsScope: '#statements.endsScope'\n
                                           \tparse: '#node'\n")
                    }
                    
                    if (node) {
                        while (!pendingAnnotations.isEmpty) {
                            node.addAnnotation(pendingAnnotations.pop())
                            
                            // Console.writeLine("Added annotation '#node.annotations.last'")
                            
                            // if (pendingAnnotations.isEmpty) {
                            //     Console.writeLine()
                            // }
                        }
                        
                        parent.addChild(node)
                    }
                } else {
                    // Console.writeLine("Only parsed annotation\n")
                }
                
                if (statements.beginsScope) {
                    if (!node) {
                        SyntaxMessage.error("Unable to parse scope declaration '#statement'", parent ?: root, throwException: false)
                        
                        node = parent.generateTemporaryScopeNode()
                    }
                    
                    parents.push(node)
                }
                if (statements.endsScope) {
                    try {
                        for (e in 0..statements.scopesEnded) {
                            if (!parents.isEmpty) {
                                parents.pop()
                            }
                        }
                    } catch (EmptyStackException ex) {
                        Console.log("Too many ending braces in file '#file'")
                    }
                }
            }
            
            if (parents.peek() != file) {
                SyntaxMessage.error("Missing ending brace", file, throwException: false)
            }
        })
    }
    
    public static searchAnnotations(var String statement) -> AnnotationSearchResult {
        let result = new AnnotationSearchResult(statement)
        var annotation = Annotation.parse(input: statement, require: false)
        
        while (annotation && statement.count > 0) {
            statement = annotation.getRemainingStatement(statement)
            result.annotations.add(annotation)
            result.remainingStatement = statement
            
            // Console.writeLine("Parsed Annotation #annotation")
            
            if (statement.count > 0) annotation = Annotation.parse(statement)
        }
        
        return result
    }
}