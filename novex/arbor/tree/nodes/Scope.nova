package "novex/arbor/tree/nodes"

import "nova/datastruct/Pair"
import "nova/datastruct/list/List"

import "novex/arbor/util/Location"
import "novex/arbor/tree/nodes/Accessible"
import "novex/arbor/tree/nodes/operations/Operation"
import "novex/arbor/tree/nodes/operations/Assignment"
import "novex/arbor/tree/nodes/exceptionhandling/Catch"
import "novex/arbor/tree/nodes/exceptionhandling/Throw"
import "novex/arbor/tree/nodes/functions/FunctionCall"
import "novex/arbor/tree/nodes/controlstructures/IfStatement"
import "novex/arbor/tree/nodes/controlstructures/ElseStatement"
import "novex/arbor/tree/nodes/controlstructures/loops/Loop"
import "novex/arbor/tree/nodes/variables/VariableDeclaration"
import "novex/arbor/tree/nodes/variables/LocalDeclaration"

import "novex/arbor/util/CompilerStringFunctions"

/// @NodeList extension that represents a scope of code. In essence, a
/// collection of statements within a pair of curly braces.
/// 
/// #example:
///     For example:
///     <code>
///     {
///         ...
///         
///         // Statements within here...
///         
///         ...
///     }
///     </code>
/// 
/// author:  Braden Steffaniak
/// since:   v0.1 Apr 5, 2014 at 10:54:20 PM
/// version: v0.2.41 Dec 17, 2014 at 7:48:17 PM
class Scope extends NodeList {
    private Int id
    
    static Class[] LADDER_FORM = [ElseStatement, Catch]
    
    visible Int depth {
        get {
            Node current = this
            
            var depth = 0
            
            while (current) {
                depth++
                
                current = current.parentWithScope
            }
            
            return depth
        }
        
        no set
    }
    
    /// Create a new Scope node.
    /// 
    /// #example
    /// 
    /// parent:   The parent of the Scope node.
    /// location: The location of the input text in the source file.
    public construct(Node parent = null, Location location = Location.INVALID) {
    	super(parent, location)
    }
    
    public parseStatement(String input, Node parent = null, Location location = Location.INVALID, Bool require = true) -> Node {
        Node node = null
        
        until (node) {
            node = Assignment.parse(input, parent, location, require)
        	node = Accessible.parseDotAccess(input, parent, require: require)
            node = IfStatement.parse(input, parent, location, require)
            node = ElseStatement.parse(input, parent, location, require)
            node = Throw.parse(input, parent, location, require)
            node = Loop.parse(input, parent, location, require)
            node = Return.parse(input, parent, location, require)
            node = LocalDeclaration.parse(input, parent, location, require)
            node = Operation.parse(input, parent, location, require)
            node = Value.parse(input, parent, location, require)
        }
        
        return node
    }
    
    public generateTemporaryScopeNode() -> Node {
        return new Scope(this)
    }
    
    printPrecedingWhitespace(Node child) =>
        LADDER_FORM.contains(child.class) ? " " : "\n"
    
    childToNova(Node child) =>
        printPrecedingWhitespace(child) + child.toNova()
    
    public writeNova() =>
        "{" + children.map(childToNova).join() + (children.count > 0 ? "\n" : "") + "}"
}